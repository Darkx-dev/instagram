generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  username    String   @unique
  email       String   @unique
  password    String
  fullName    String
  bio         String?
  avatarUrl   String?
  pronouns    String?
  isVerified  Boolean  @default(false)
  accountType String   @default("personal") // e.g., personal, business, creator
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  posts                Post[]
  stories              Story[]
  comments             Comment[]
  likes                Like[]
  sentMessages         Message[]      @relation("SentMessages")
  receivedMessages     Message[]      @relation("ReceivedMessages")
  groupMembers         GroupMember[]
  notifications        Notification[]
  followers            Follow[]       @relation("Followers")
  following            Follow[]       @relation("Following")
  savedPosts           SavedPost[]
  highlights           Highlight[]
  storyViews           StoryView[] // Added for StoryView relation
  commentLikes         CommentLike[] // Added for CommentLike relation
  relatedNotifications Notification[] @relation("RelatedUser") // Added for Notification relatedUser relation
}

model Post {
  id         String   @id @default(cuid())
  caption    String?
  postType   String   @default("post") // e.g., post, reel, story
  location   String?
  isArchived Boolean  @default(false)
  isPinned   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  author        User           @relation(fields: [authorId], references: [id])
  authorId      String
  images        PostImage[]
  likes         Like[]
  comments      Comment[]
  tags          PostTag[]
  savedBy       SavedPost[]
  notifications Notification[] // Added for Notification relatedPost relation

  @@index([postType])
}

model PostImage {
  id        String   @id @default(cuid())
  imageUrl  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  order     Int      @default(0)
  createdAt DateTime @default(now())

  @@index([postId])
}

model Story {
  id        String   @id @default(cuid())
  mediaUrl  String
  mediaType String   @default("image") // e.g., image, video
  expiresAt DateTime
  createdAt DateTime @default(now())

  author      User        @relation(fields: [authorId], references: [id])
  authorId    String
  views       StoryView[]
  highlight   Highlight?  @relation(fields: [highlightId], references: [id])
  highlightId String?

  @@index([authorId, expiresAt])
}

model StoryView {
  id       String   @id @default(cuid())
  story    Story    @relation(fields: [storyId], references: [id])
  storyId  String
  viewer   User     @relation(fields: [viewerId], references: [id])
  viewerId String
  viewedAt DateTime @default(now())

  @@unique([storyId, viewerId])
}

model Highlight {
  id         String   @id @default(cuid())
  title      String
  coverImage String?
  createdAt  DateTime @default(now())

  author   User    @relation(fields: [authorId], references: [id])
  authorId String
  stories  Story[]

  @@index([authorId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post            Post          @relation(fields: [postId], references: [id])
  postId          String
  author          User          @relation(fields: [authorId], references: [id])
  authorId        String
  parentComment   Comment?      @relation("CommentReplies", fields: [parentCommentId], references: [id])
  parentCommentId String?
  replies         Comment[]     @relation("CommentReplies")
  likes           CommentLike[]

  @@index([postId, parentCommentId])
}

model CommentLike {
  id        String   @id @default(cuid())
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([userId, commentId])
  @@index([commentId])
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@index([postId])
}

model Follow {
  id          String   @id @default(cuid())
  follower    User     @relation("Followers", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("Following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId, followingId])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  mediaUrl  String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  sender     User    @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   User    @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  group      Group?  @relation(fields: [groupId], references: [id])
  groupId    String?

  @@index([senderId, receiverId])
}

model Group {
  id        String   @id @default(cuid())
  name      String
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members  GroupMember[]
  messages Message[]

  @@index([name])
}

model GroupMember {
  id       String   @id @default(cuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  group    Group    @relation(fields: [groupId], references: [id])
  groupId  String
  role     String   @default("member") // e.g., admin, member
  joinedAt DateTime @default(now())

  @@unique([userId, groupId])
  @@index([groupId])
}

model Notification {
  id        String   @id @default(cuid())
  type      String // e.g., like, comment, follow, mention
  content   String?
  createdAt DateTime @default(now())
  read      Boolean  @default(false)

  user          User    @relation(fields: [userId], references: [id])
  userId        String
  relatedUser   User?   @relation("RelatedUser", fields: [relatedUserId], references: [id])
  relatedUserId String?
  relatedPost   Post?   @relation(fields: [relatedPostId], references: [id])
  relatedPostId String?

  @@index([userId, type])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())

  posts PostTag[]

  @@index([name])
}

model PostTag {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     String
  createdAt DateTime @default(now())

  @@unique([postId, tagId])
  @@index([tagId])
}

model SavedPost {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@index([userId])
}
