generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  fullName  String
  bio       String?
  avatarUrl String?
  createdAt DateTime @default(now())

  // Relationships
  posts            Post[]
  comments         Comment[]
  likes            Like[]
  sentMessages     Message[]      @relation("SentMessages")
  receivedMessages Message[]      @relation("ReceivedMessages")
  groupMembers     GroupMember[]
  notifications    Notification[]

  followers Follow[] @relation("Followers")
  following Follow[] @relation("Following")
}

model Post {
  id        String   @id @default(cuid())
  caption   String?
  createdAt DateTime @default(now())

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  images   PostImage[] // New relation for multiple images
  likes    Like[]
  comments Comment[]
}

model PostImage {
  id        String   @id @default(cuid())
  imageUrl  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  order     Int      @default(0) // To maintain image order
  createdAt DateTime @default(now())
}

model Like {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  post   Post   @relation(fields: [postId], references: [id])
  postId String
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Follow {
  id          String @id @default(cuid())
  follower    User   @relation("Followers", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("Following", fields: [followingId], references: [id])
  followingId String

  createdAt DateTime @default(now())

  @@unique([followerId, followingId])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  sender     User   @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   User   @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String

  group   Group?  @relation(fields: [groupId], references: [id])
  groupId String?
}

model Group {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())

  members  GroupMember[]
  messages Message[]
}

model GroupMember {
  id      String @id @default(cuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  joinedAt DateTime @default(now())

  @@unique([userId, groupId])
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  content   String?
  createdAt DateTime @default(now())
  read      Boolean  @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String
}
